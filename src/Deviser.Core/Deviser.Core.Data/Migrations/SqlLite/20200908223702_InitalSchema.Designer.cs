// <auto-generated />
using System;
using Deviser.Core.Data.Installation.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deviser.Core.Data.Migrations.SqlLite
{
    [DbContext(typeof(SqlLiteDbContext))]
    [Migration("20200908223702_InitalSchema")]
    partial class InitalSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Deviser.Core.Data.Entities.AdminPage", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PageId");

                    b.HasIndex("ModuleId");

                    b.ToTable("AdminPage");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentFieldType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("ContentFieldType");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageContentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PageContentId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ContentPermission");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconImage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsList")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ContentType");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentTypeField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContentFieldTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsShownOnList")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShownOnPreview")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContentFieldTypeId");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("ContentTypeField");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentTypeProperty", b =>
                {
                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentTypeId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ContentTypeProperty");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CultureCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FallbackCulture")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Layout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Config")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Layout");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.LayoutType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconImage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LayoutTypeIds")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LayoutType");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.LayoutTypeProperty", b =>
                {
                    b.Property<Guid>("LayoutTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.HasKey("LayoutTypeId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("LayoutTypeProperty");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModulePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PageModuleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ModulePermission");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModuleView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerNamespace")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("IconClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconImage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleViewTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId")
                        .HasName("IX_FK_ModuleViews_Modules");

                    b.HasIndex("ModuleViewTypeId");

                    b.ToTable("ModuleView");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModuleViewProperty", b =>
                {
                    b.Property<Guid>("ModuleViewId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.HasKey("ModuleViewId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ModuleViewProperty");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModuleViewType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlType")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ModuleViewType");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.OptionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("List")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionList");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsIncludedInMenu")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LayoutId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PageLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PageOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PageTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<float>("SiteMapPriority")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThemeSrc")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("PageTypeId");

                    b.HasIndex("ParentId")
                        .HasName("IX_FK_Pages_Pages");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InheritEditPermissions")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("InheritViewPermissions")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("PageId");

                    b.ToTable("PageContent");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageContentTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentData")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageContentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PageContentId");

                    b.ToTable("PageContentTranslation");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InheritEditPermissions")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("InheritViewPermissions")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleViewId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId")
                        .HasName("IX_FK_PageModule_Modules");

                    b.HasIndex("ModuleViewId");

                    b.HasIndex("PageId")
                        .HasName("IX_FK_PageModule_Module");

                    b.ToTable("PageModule");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PagePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PagePermission");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageTranslation", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<bool>("IsLinkNewWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("PageHeaderTags")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("URL")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.HasKey("PageId", "Locale");

                    b.ToTable("PageTranslation");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PageType");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Entity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OptionListId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OptionListId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.SiteSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("SettingValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SiteSetting");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.AdminPage", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Module", "Module")
                        .WithMany("AdminPage")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Page", "Page")
                        .WithOne("AdminPage")
                        .HasForeignKey("Deviser.Core.Data.Entities.AdminPage", "PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentPermission", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.PageContent", "PageContent")
                        .WithMany("ContentPermissions")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Permission", "Permission")
                        .WithMany("ContentPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Role", "Role")
                        .WithMany("ContentPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentTypeField", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.ContentFieldType", "ContentFieldType")
                        .WithMany("ContentTypeFields")
                        .HasForeignKey("ContentFieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.ContentType", "ContentType")
                        .WithMany("ContentTypeFields")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ContentTypeProperty", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.ContentType", "ContentType")
                        .WithMany("ContentTypeProperties")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Property", "Property")
                        .WithMany("ContentTypeProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.LayoutTypeProperty", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.LayoutType", "LayoutType")
                        .WithMany("LayoutTypeProperties")
                        .HasForeignKey("LayoutTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Property", "Property")
                        .WithMany("LayoutTypeProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModulePermission", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.PageModule", "PageModule")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("PageModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Permission", "Permission")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Role", "Role")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModuleView", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Module", "Module")
                        .WithMany("ModuleView")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.ModuleViewType", "ModuleViewType")
                        .WithMany("ModuleView")
                        .HasForeignKey("ModuleViewTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.ModuleViewProperty", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.ModuleView", "ModuleView")
                        .WithMany("ModuleViewProperties")
                        .HasForeignKey("ModuleViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Property", "Property")
                        .WithMany("ModuleViewProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Page", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Layout", "Layout")
                        .WithMany("Page")
                        .HasForeignKey("LayoutId");

                    b.HasOne("Deviser.Core.Data.Entities.PageType", "PageType")
                        .WithMany("Page")
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Deviser.Core.Data.Entities.Page", "Parent")
                        .WithMany("ChildPage")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageContent", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.ContentType", "ContentType")
                        .WithMany("PageContents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Page", "Page")
                        .WithMany("PageContent")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageContentTranslation", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.PageContent", "PageContent")
                        .WithMany("PageContentTranslation")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageModule", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Module", "Module")
                        .WithMany("PageModule")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.ModuleView", "ModuleView")
                        .WithMany("PageModules")
                        .HasForeignKey("ModuleViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Page", "Page")
                        .WithMany("PageModule")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PagePermission", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Page", "Page")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Permission", "Permission")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.Role", "Role")
                        .WithMany("PagePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.PageTranslation", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Page", "Page")
                        .WithMany("PageTranslation")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.Property", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.OptionList", "OptionList")
                        .WithMany("Properties")
                        .HasForeignKey("OptionListId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Deviser.Core.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviser.Core.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Deviser.Core.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
